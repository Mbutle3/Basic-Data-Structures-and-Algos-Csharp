using System;

namespace LearningProgramming_CSharp
{
    class Bubble_Sort
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Bubble Sort");
            /* Printing out unsorted array*/
            int[] myArray = { 20, 30, -15, 7, 55, 1, -22 };
            Console.Write("Unsorted Array: ");
            for (int i = 0; i < myArray.Length; i++)
            {
                Console.Write(myArray[i] + " ");
            }
            /*
			 * Sorting Array In Ascending Order 
			 * Sorted Partition Grows Right -> Left
			 * After Each Iteration Of The Outer Loop The Sorted Partition Grows By One
			 * 
			 * The Array Starts Completely Unsorted At The last index 
			 * First iteration: [x,x,x,x,x,x,55]
			 * 
			 * After Two Iterations Of The Elements At Index Five and Six are sorted 
			 * Second iteration:[x,x,x,x,x,30,55]
			 * 
			 * Repeats until at the start of the array
			 * 70 steps for 7 items - O(n^2) - Quadratic Run Time Complexity
			 */


            /*Outer for-loop:
			 * -Declared lastUnsortedIndex variable to equal the length of the array - 1 
			 *  		 Explanation:
			 *  		 This array holds 7 elements, but the starting index is at 0. 
			 *  		 So the array will increment from 0 to 6, [0-6] 
			 *  		 When declared the lastUnsortedIndex variable will equal 7 - 1 which is 6
			 *  		 This ensure that we do not generate an out of bound exception error
			 * -The Outer For Loop Will iterate until it reaches the first index [0]
			 * -The lastUnsortedIndex variable will also decrementing each time this loops completes an iteration
			 * -Traversing the array Right - > Left 
			 */
            for (int lastUnsortedIndex = myArray.Length - 1; lastUnsortedIndex > 0; lastUnsortedIndex--)
            {
                /*
				 * Inner for-loop
				 * -Declare int i = 0; which is the beginning index of an array
				 * -if i is less than the lastUnsortedIndex, then the element at index [i] has yet to be sorted
				 * -i will then increment
				 * 
				 * 	Explanation: i will start at the beginning of the array index 
				 * 				 array[0] < array[n];
				 * 				 i will loop though the array Left -> Right 
				 * 				 while the lastUnsortedIndex will loop through the array Right -> Left 
				 * 			     This will continue until the lastUnsortedArray outer loop reaches the first index-[0]
				 */
                for (int i = 0; i < lastUnsortedIndex; i++)
                {

                    /*
					 * if the element in the array [i] is greater than the nextElement in the array (array[i + 1])
					 * -Execute the swap method taking the following arguments
					 * 	array as the unsorted array 
					 * 	i = i
					 * 	i + 1 = j
					 * 
					 */

                    int nextElement = myArray[i + 1];
                    if (myArray[i] > nextElement)
                    {
                        swap(myArray, i, i + 1);
                    }

                }
               
            }

            /*
			 * Printing out sorted array*/
            Console.Write("\n" + "Sorted Array: ");
            for (int i = 0; i < myArray.Length; i++)
            {
                Console.Write(myArray[i] + " ");
            }

			Console.WriteLine();
		}

        public static void swap(int[] array, int i, int j)
        {
            /*Swap Method:
			 * -Method takes in an array of unsorted integers
			 * -Method also two indices of the elements we are wanting to swap
			 * 
			 *  Example: 
			 *  Array {1,2,4,3,5}
			 *  i = 4
			 *  j = 3
			 */

            /*1st - Check
			 * -Check if both indexes have the same number just return,
			 * -no point in swapping elements that are the same*/

            if (i == j)
            {
                return;
            }

            /*2nd - Execute Swap
			 * -Create temporary int variable = temp
			 * -Assign the value at array [i] to temp
			 * -Assign the value at array [i] to array [j] 
			 *  overridden the value at array [i] but it's saved to temp
			 * -Assign the value of array [j] to temp 
			 */

            int temp;
            temp = array[i];
            array[i] = array[j];
            array[j] = temp;

            /*Conclusion
			 * -What use to be at position i is now at position j
			 * -What use to be at position j is not at position i
			 */

        }
    }
}
